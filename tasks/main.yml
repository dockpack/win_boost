---

- name: Ensure the required NuGet package provider version is installed
  win_shell: Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force

- name: Install PowerShell Community Extensions
  win_psmodule:
    name: Pscx
    state: present
    allow_clobber: true

- name: Install utilities
  win_chocolatey:
    name: "{{ item }}"
    state: present
  with_items:
    - 7zip.install
  register: install_7zip
  until: install_7zip is succeeded
  retries: 10
  delay: 2

- name: Create work directories
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ boost_prefix }}"
    - "{{ boost_workdir }}"
  when: compile_boost|bool

- name: download zlib source
  win_get_url:
    url: "{{ zlib_url }}"
    dest: "{{ boost_workdir }}"
  register: download_zlib
  until: download_zlib is succeeded
  retries: 10
  delay: 2

- name: gunzip lzib source
  win_unzip:
    src: "{{ download_zlib.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_prefix }}/zlib-{{ zlib_version }}.tar"
    copy: false

- name: untar lzib source
  win_unzip:
    src: "{{ boost_prefix }}/zlib-{{ zlib_version }}.tar"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_prefix }}/zlib-{{ zlib_version }}"
    copy: false

- name: download bzip2 source
  win_get_url:
    url: "{{ bzip2_url }}"
    dest: "{{ boost_workdir }}"
    validate_certs: false
  register: download_bzip2
  until: download_bzip2 is succeeded
  retries: 10
  delay: 2

- name: unpack bzip2 source
  win_unzip:
    src: "{{ download_bzip2.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    recurse: true
    creates: "{{ boost_prefix }}/bzip2-{{ bzip2_version }}"
    copy: false

- name: cleanup temporary files
  win_file:
    path: "{{ boost_prefix }}/{{ item }}"
    state: absent
  with_items:
    - sample1.tar
    - sample2.tar
    - sample3.tar

- name: download boost source
  when: compile_boost|bool
  win_get_url:
    url: "{{ boost_url }}"
    dest: "{{ boost_workdir }}"
  register: download_boost
  until: download_boost is succeeded
  retries: 10
  delay: 2

- name: unpack boost source
  win_unzip:
    src: "{{ download_boost.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_prefix }}/boost-{{ boost_version }}"
    copy: false

- name: verify install
  win_stat:
    path: "{{ boost_install_dir }}/libs"
  when: not compile_boost|bool
  register: boost_librarydir

- name: Create install directory
  win_file:
    path: "{{ boost_install_dir }}"
    state: directory
  when: not compile_boost|bool and not boost_librarydir.stat.exists

- name: Get boost binary
  win_get_url:
    url: "{{ boost_bin }}"
    dest: "{{ boost_workdir }}/{{ boost_file_name_exe }}"
  when: not compile_boost|bool

- name: Install boost
  win_shell: "cmd.exe /c {{ boost_file_name_exe }} /DIR='{{ boost_install_dir }}' /SILENT /NOCANCEL"
  args:
    chdir: "{{ boost_workdir }}"
  when: not compile_boost|bool

- name: Add boost root to system environment
  win_environment:
    name: BOOST_ROOT
    value: "{{ boost_install_dir }}"
    level: machine
    state: present
  when: not compile_boost|bool

- name: Add boost library directory to system environment
  win_environment:
    name: BOOST_LIBRARYDIR
    value: "{{ boost_install_dir }}/libs"
    level: machine
    state: present
  when: not compile_boost|bool

- name: Cleanup
  win_file:
    path: "{{ boost_workdir }}"
    state: absent
