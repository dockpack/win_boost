---

- name: Configure my toolset
  set_fact:
    my_toolset: "{{ toolset }}"
  tags:
    - boost
    - b2

- name: Ensure the required NuGet package provider version is installed
  # yamllint disable-line rule:line-length
  win_shell: Find-PackageProvider -Name Nuget -ForceBootstrap -IncludeDependencies -Force

- name: Install PowerShell Community Extensions
  win_psmodule:
    name: Pscx
    state: present
    allow_clobber: true

- name: Install utilities
  win_chocolatey:
    name: "{{ item }}"
    state: present
  with_items:
    - 7zip.install
  register: install_7zip
  until: install_7zip is succeeded
  retries: 10
  delay: 2

- name: Create work directories
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ boost_prefix }}"
    - "{{ boost_workdir }}"
  when: compile_boost|bool

- name: download zlib source
  win_get_url:
    url: "{{ zlib_url }}"
    dest: "{{ boost_workdir }}"
  register: download_zlib
  until: download_zlib is succeeded
  retries: 10
  delay: 2
  tags:
    - zlib

- name: gunzip lzib source
  win_unzip:
    src: "{{ download_zlib.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_prefix }}/zlib-{{ zlib_version }}.tar"
    copy: false
  tags:
    - zlib

- name: untar lzib source
  win_unzip:
    src: "{{ boost_prefix }}/zlib-{{ zlib_version }}.tar"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_prefix }}/zlib-{{ zlib_version }}"
    copy: false
  tags:
    - zlib

- name: download bzip2 source
  win_get_url:
    url: "{{ bzip2_url }}"
    dest: "{{ boost_workdir }}"
    validate_certs: false
  register: download_bzip2
  until: download_bzip2 is succeeded
  retries: 10
  delay: 2
  tags:
    - bzip2

- name: unpack bzip2 source
  win_unzip:
    src: "{{ download_bzip2.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    recurse: true
    creates: "{{ boost_prefix }}/bzip2-{{ bzip2_version }}"
    copy: false
  tags:
    - bzip2

- name: cleanup temporary files
  win_file:
    path: "{{ boost_prefix }}/{{ item }}"
    state: absent
  with_items:
    - sample1.tar
    - sample2.tar
    - sample3.tar
  tags:
    - zlib
    - bzip2

- name: download boost source
  when: compile_boost|bool
  win_get_url:
    url: "{{ boost_url }}"
    dest: "{{ boost_workdir }}"
  register: download_boost
  until: download_boost is succeeded
  retries: 10
  delay: 2
  tags:
    - boost

- name: unpack boost source
  win_unzip:
    src: "{{ download_boost.dest }}"
    dest: "{{ boost_prefix }}"
    delete_archive: true
    creates: "{{ boost_dir }}"
    copy: false
  tags:
    - boost

- name: verify install
  win_stat:
    path: "{{ boost_install_dir }}/libs"
  when: not compile_boost|bool
  register: boost_librarydir
  tags:
    - boost

- name: create install directory
  win_file:
    path: "{{ boost_install_dir }}"
    state: directory
  when: not compile_boost|bool and not boost_librarydir.stat.exists
  tags:
    - boost

- name: get boost binary
  win_get_url:
    url: "{{ boost_bin }}"
    dest: "{{ boost_workdir }}/{{ boost_file_name_exe }}"
  when: not compile_boost|bool
  tags:
    - boost

- name: install boost
  # yamllint disable-line rule:line-length
  win_shell: "cmd.exe /c {{ boost_file_name_exe }} /DIR='{{ boost_install_dir }}' /SILENT /NOCANCEL"
  args:
    chdir: "{{ boost_workdir }}"
  when: not compile_boost|bool
  tags:
    - boost

- name: bootstrap boost
  win_shell: "cmd.exe /c bootstrap"
  args:
    chdir: "{{ boost_dir }}"
    creates: "{{ boost_dir }}/project-config.jam"
  when: compile_boost|bool
  tags:
    - bootstrap
    - boost

- name: clean b2 for boost
  win_shell: "cmd.exe /c b2 --clean"
  args:
    chdir: "{{ boost_dir }}"
  when: compile_boost|bool and clean_boost|bool
  tags:
    - b2
    - boost

- name: run b2 for boost compilation
  win_shell: "cmd.exe /c b2 {{ compile_boost_with }}
      --build-type=minimal -j{{ ansible_processor_vcpus|default('2') }}
      toolset={{ my_toolset }}
      address-model={{ item.address_model }}
      architecture={{ item.architecture }}
      link={{ item.link }}
      threading={{ item.threading }}
      runtime-link={{ item.runtime_link }}
      stage --stagedir=stage/lib{{ item.address_model }}-{{ my_toolset }}
      -sBZIP2_SOURCE='{{ boost_prefix }}/bzip2-{{ bzip2_version }}'
      -sZLIB_SOURCE='{{ boost_prefix }}/zlib-{{ zlib_version }}'"
  args:
    chdir: "{{ boost_dir }}"
    creates: "stage/lib{{ item.address_model }}-{{ my_toolset }}"
  with_items:
    - "{{ boost_set }}"
  when: compile_boost|bool
  tags:
    - b2
    - boost

- name: add boost root to system environment
  win_environment:
    name: BOOST_ROOT
    value: "{{ boost_install_dir }}"
    level: machine
    state: present
  when: not compile_boost|bool
  tags:
    - boost

- name: Add boost library directory to system environment
  win_environment:
    name: BOOST_LIBRARYDIR
    value: "{{ boost_install_dir }}/libs"
    level: machine
    state: present
  when: not compile_boost|bool
  tags:
    - boost

- name: Cleanup
  win_file:
    path: "{{ boost_workdir }}"
    state: absent
